#include "SquadCommander.h"
#include "AgentManager.h"
#include "ExplorationManager.h"
#include "ComsatAgent.h"
#include "TerranSquadCommander.h"
#include "BuildPlanner.h"
#include "ProtossSquadCommander.h"

SquadCommander* SquadCommander::instance = NULL;

SquadCommander::SquadCommander() {
	hasBeenAttacked = false;
	currentState = STATE_DEFEND;
	currentGoal = TilePosition(-1, -1);
}

SquadCommander::~SquadCommander() {
	delete instance;
}

SquadCommander* SquadCommander::getInstance() {
	if (instance == NULL) {
		if (BuildPlanner::isTerran()) {
			instance = new TerranSquadCommander();
		}
		if (BuildPlanner::isProtoss()) {
			instance = new ProtossSquadCommander();
		}
	}
	return instance;
}

bool SquadCommander::checkWorkersAttack(BaseAgent *base) {
	bool hasAttacked = false;

	for(set<Unit*>::const_iterator i=Broodwar->enemy()->getUnits().begin();i!=Broodwar->enemy()->getUnits().end();i++) {
		double dist = (*i)->getDistance(base->getUnit());
		if (dist <= 384) {
			//Enemy unit discovered. Attack with all workers.
			AgentManager* agentManager = AgentManager::getInstance();
			for (int j = 0; j < (int)agentManager->size(); j++) {
				BaseAgent* agent = agentManager->at(j);
				if (agent->isAlive() && agent->isWorker()) {
					agent->getUnit()->attackUnit((*i));
					hasAttacked = true;
				}
				AgentManager::release(agent);
			}
		}
	}
	return hasAttacked;
}

int SquadCommander::enemyUnitsWithinRange(TilePosition start, int range) {
	int eCnt = 0;
	for(set<Unit*>::const_iterator i=Broodwar->enemy()->getUnits().begin();i!=Broodwar->enemy()->getUnits().end();i++) {
		double dist = (*i)->getDistance(Position(start));
		if (dist <= range) {
			eCnt++;
		}
		
	}
	return eCnt;
}

void SquadCommander::printStrength() {
	int score = 0;
	AgentManager* agentManager = AgentManager::getInstance();
	for (int i = 0; i < (int)agentManager->size(); i++) {
		BaseAgent* agent = agentManager->at(i);
		if (isUnit(agent->getUnit())) {
			int tmp = agent->getUnit()->getType().destroyScore();
			score += tmp;
			//Broodwar->printf("[%d] %s -> %d pts", agents.at(i)->getUnitID(), agents.at(i)->getUnit()->getType().getName().c_str(), tmp);
		}
		AgentManager::release(agent);
	}

	Broodwar->printf("[SC] Current strength: %d, Enemy strength: %d", countOwnStrength(), estimateEnemyStrength());
}

bool SquadCommander::isUnit(Unit* unit) {
	if (unit->getType().isBuilding() || unit->getType().isWorker()) {
		return false;
	}
	return true;
}

int SquadCommander::countOwnStrength() {
	int score = 0;
	AgentManager* agentManager = AgentManager::getInstance();
	for (int i = 0; i < (int)agentManager->size(); i++) {
		BaseAgent* agent = agentManager->at(i);
		if (agent->isAlive()) {
			if (isUnit(agent->getUnit())) {
				if (!agent->getUnit()->isLoaded() || agent->isExploring() || !agent->isOfType(UnitTypes::Protoss_Reaver)) {
					//Dont count bunkered (defending) units or explorers
					score += agent->getUnit()->getType().destroyScore();
				}
			}
		}
		AgentManager::release(agent);
	}
	return score;
}

int SquadCommander::estimateEnemyStrength() {
	int score = 0;
	for(set<Unit*>::const_iterator i=Broodwar->enemy()->getUnits().begin();i!=Broodwar->enemy()->getUnits().end();i++) {
		if (isUnit(*i)) {
			score += (*i)->getType().destroyScore();
		}
	}
	return score;
}

TilePosition SquadCommander::getClosestEnemyBuildingTo(TilePosition start) {
	Unit* closestBuilding = NULL;
	SpottedObject* closestObj = NULL;
	double bestDist = -1;

	for(set<Unit*>::const_iterator i=Broodwar->enemy()->getUnits().begin();i!=Broodwar->enemy()->getUnits().end();i++) {
		if ((*i)->getType().isBuilding()) {
			double cDist = start.getDistance((*i)->getTilePosition());
			if (!ExplorationManager::canReach(start, (*i)->getTilePosition())) {
				cDist = -1;
			}

			if (bestDist < 0 || cDist < bestDist) {
				bestDist = cDist;
				closestBuilding = (*i);
			}
		}
	}

	if (closestBuilding != NULL) {
		//Broodwar->printf("[TSC]: Closest enemy building is %s", closestBuilding->getType().getName().c_str());
		return closestBuilding->getTilePosition();
	}
	else if (ExplorationManager::getInstance()->isActive()) {
		bestDist = -1;

		vector<SpottedObject*> units = ExplorationManager::getInstance()->getSpottedUnits();
		for (int i = 0; i < (int)units.size(); i++) {
			SpottedObject* obj = units.at(i);
			if (obj->getType().isBuilding() && obj->isActive()) {
				double cDist = obj->getDistance(start);
				if (bestDist < 0 || cDist < bestDist) {
					bestDist = cDist;
					closestObj = obj;
				}
			}
		}

		//Broodwar->printf("[TSC]: using ExpManager. Closest is %s", closestObj.getType().getName().c_str());
	}
	else {
		//Broodwar->printf("[TSC]: No enemy building found");
		return TilePosition(-1, -1);
	}

	return closestObj->getTilePosition();
}

void SquadCommander::checkRemovableObstacles() {
	for(set<Unit*>::iterator m = Broodwar->getMinerals().begin(); m != Broodwar->getMinerals().end(); m++) {
		if ((*m)->getResources() <= 20) {
			//Found a mineral that we can remove.
			BaseAgent* baseAgent = AgentManager::getInstance()->getClosestBase((*m)->getTilePosition());
			if (baseAgent != NULL) {
				double cDist = baseAgent->getUnit()->getDistance((*m));
				if (cDist < 1000) {
					//It is close to a base, remove it.

					//Step 1: Check if someone already is working on it
					bool assign = true;
					AgentManager* agentManager = AgentManager::getInstance();
					for (int i = 0; i < (int)agentManager->size(); i++) {
						BaseAgent* agent = agentManager->at(i);
						if (agent->isWorker()) {
							Unit* u = agent->getUnit();
							if (u->isGatheringMinerals()) {
								Unit* t = u->getTarget();
								if (t != NULL && t->getID() == u->getID()) {
									//Someone already working on it. Dont bother.
									assign = false;
								}
							}
						}
						AgentManager::release(agent);
					}

					if (assign) {
						BaseAgent* worker = AgentManager::getInstance()->findClosestFreeWorker((*m)->getTilePosition());
						if (worker != NULL) {
							worker->getUnit()->rightClick((*m));
						}
					}
				}
			}
		}
	}
}
