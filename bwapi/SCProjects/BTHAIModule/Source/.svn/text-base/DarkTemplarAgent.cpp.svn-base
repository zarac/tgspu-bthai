#include "DarkTemplarAgent.h"
#include "PFManager.h"
#include "AgentManager.h"

DarkTemplarAgent::DarkTemplarAgent(Unit* mUnit) {
	unit = mUnit;
	unitID = unit->getID();
	//Broodwar->printf("DarkTemplarAgent created (%s)", unit->getType().getName().c_str());
	lastFrame = 0;

	goal = TilePosition(-1, -1);
}

void DarkTemplarAgent::computeActions() {
	int cFrame = Broodwar->getFrameCount();
	if (cFrame - lastFrame < 20) {
		return;
	}
	lastFrame = cFrame;

	bool defensive = false;
	
	if (!unit->isCloaked() && enemyAttackingUnitsWithinRange(12 * 32) > 0) {
		//Unit is detected
		Broodwar->printf("[%d] Dark Templar detected, retreating", unitID);
		defensive = true;
	}

	PFManager::getInstance()->computeAttackingUnitActions(this, goal, defensive);

	Unit* target = findTarget();
	if (target != NULL) {
		//Broodwar->printf("[%d] Change target", unitID);
		unit->attackUnit(target);
	}
}

string DarkTemplarAgent::getTypeName() {
	return "DarkTemplarAgent";
}

Unit* DarkTemplarAgent::findTarget() {
	if (unit->getTarget() == NULL) {
		return NULL;
	}
	int noMyTarget = noMeleeUnitsAttacking(unit->getTarget());
	if (noMyTarget > 1 && noMyTarget <= 4) {
		//Already have a good target
		return NULL;
	}

	int maxRange = 15*32;
	Unit* target = NULL;
	int bestScore = -1;

	for(set<Unit*>::const_iterator i=Broodwar->enemy()->getUnits().begin();i!=Broodwar->enemy()->getUnits().end();i++) {		
		if ((*i)->exists()) {
			if (canAttack(unit->getType(), (*i)->getType()) && !(*i)->getType().isDetector()) {
				double dist = unit->getDistance((*i)->getPosition());
				if (dist <= maxRange) {
					int no = noMeleeUnitsAttacking((*i));
					if (no > 1 && no <= 4) {
						int cScore = (*i)->getType().destroyScore();
						if (bestScore < 0 || cScore > bestScore) {
							bestScore = cScore;
							target = (*i);
						}
					}
				}
			}
		}
	}

	return target;
}
